// Code generated by protoc-gen-go. DO NOT EDIT.
// source: queue-service.proto

/*
Package queue_service is a generated protocol buffer package.

It is generated from these files:
	queue-service.proto

It has these top-level messages:
	QueuePushRequest
	QueuePushResponse
	QueuePopRequest
	QueuePopResponse
	QueueSizeRequest
	QueueSizeResponse
*/
package queue_service

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type QueuePushRequest struct {
	Enqueue string `protobuf:"bytes,1,opt,name=enqueue" json:"enqueue,omitempty"`
}

func (m *QueuePushRequest) Reset()                    { *m = QueuePushRequest{} }
func (m *QueuePushRequest) String() string            { return proto.CompactTextString(m) }
func (*QueuePushRequest) ProtoMessage()               {}
func (*QueuePushRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *QueuePushRequest) GetEnqueue() string {
	if m != nil {
		return m.Enqueue
	}
	return ""
}

type QueuePushResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *QueuePushResponse) Reset()                    { *m = QueuePushResponse{} }
func (m *QueuePushResponse) String() string            { return proto.CompactTextString(m) }
func (*QueuePushResponse) ProtoMessage()               {}
func (*QueuePushResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *QueuePushResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type QueuePopRequest struct {
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
}

func (m *QueuePopRequest) Reset()                    { *m = QueuePopRequest{} }
func (m *QueuePopRequest) String() string            { return proto.CompactTextString(m) }
func (*QueuePopRequest) ProtoMessage()               {}
func (*QueuePopRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *QueuePopRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type QueuePopResponse struct {
	Dequeued string `protobuf:"bytes,1,opt,name=dequeued" json:"dequeued,omitempty"`
}

func (m *QueuePopResponse) Reset()                    { *m = QueuePopResponse{} }
func (m *QueuePopResponse) String() string            { return proto.CompactTextString(m) }
func (*QueuePopResponse) ProtoMessage()               {}
func (*QueuePopResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *QueuePopResponse) GetDequeued() string {
	if m != nil {
		return m.Dequeued
	}
	return ""
}

type QueueSizeRequest struct {
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
}

func (m *QueueSizeRequest) Reset()                    { *m = QueueSizeRequest{} }
func (m *QueueSizeRequest) String() string            { return proto.CompactTextString(m) }
func (*QueueSizeRequest) ProtoMessage()               {}
func (*QueueSizeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *QueueSizeRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type QueueSizeResponse struct {
	Size   int64    `protobuf:"varint,1,opt,name=size" json:"size,omitempty"`
	Queued []string `protobuf:"bytes,2,rep,name=queued" json:"queued,omitempty"`
}

func (m *QueueSizeResponse) Reset()                    { *m = QueueSizeResponse{} }
func (m *QueueSizeResponse) String() string            { return proto.CompactTextString(m) }
func (*QueueSizeResponse) ProtoMessage()               {}
func (*QueueSizeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *QueueSizeResponse) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *QueueSizeResponse) GetQueued() []string {
	if m != nil {
		return m.Queued
	}
	return nil
}

func init() {
	proto.RegisterType((*QueuePushRequest)(nil), "QueuePushRequest")
	proto.RegisterType((*QueuePushResponse)(nil), "QueuePushResponse")
	proto.RegisterType((*QueuePopRequest)(nil), "QueuePopRequest")
	proto.RegisterType((*QueuePopResponse)(nil), "QueuePopResponse")
	proto.RegisterType((*QueueSizeRequest)(nil), "QueueSizeRequest")
	proto.RegisterType((*QueueSizeResponse)(nil), "QueueSizeResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for QueueService service

type QueueServiceClient interface {
	Push(ctx context.Context, in *QueuePushRequest, opts ...grpc.CallOption) (*QueuePushResponse, error)
	Pop(ctx context.Context, in *QueuePopRequest, opts ...grpc.CallOption) (*QueuePopResponse, error)
	Size(ctx context.Context, in *QueueSizeRequest, opts ...grpc.CallOption) (*QueueSizeResponse, error)
}

type queueServiceClient struct {
	cc *grpc.ClientConn
}

func NewQueueServiceClient(cc *grpc.ClientConn) QueueServiceClient {
	return &queueServiceClient{cc}
}

func (c *queueServiceClient) Push(ctx context.Context, in *QueuePushRequest, opts ...grpc.CallOption) (*QueuePushResponse, error) {
	out := new(QueuePushResponse)
	err := grpc.Invoke(ctx, "/QueueService/Push", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueServiceClient) Pop(ctx context.Context, in *QueuePopRequest, opts ...grpc.CallOption) (*QueuePopResponse, error) {
	out := new(QueuePopResponse)
	err := grpc.Invoke(ctx, "/QueueService/Pop", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueServiceClient) Size(ctx context.Context, in *QueueSizeRequest, opts ...grpc.CallOption) (*QueueSizeResponse, error) {
	out := new(QueueSizeResponse)
	err := grpc.Invoke(ctx, "/QueueService/Size", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for QueueService service

type QueueServiceServer interface {
	Push(context.Context, *QueuePushRequest) (*QueuePushResponse, error)
	Pop(context.Context, *QueuePopRequest) (*QueuePopResponse, error)
	Size(context.Context, *QueueSizeRequest) (*QueueSizeResponse, error)
}

func RegisterQueueServiceServer(s *grpc.Server, srv QueueServiceServer) {
	s.RegisterService(&_QueueService_serviceDesc, srv)
}

func _QueueService_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueuePushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServiceServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/QueueService/Push",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServiceServer).Push(ctx, req.(*QueuePushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueueService_Pop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueuePopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServiceServer).Pop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/QueueService/Pop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServiceServer).Pop(ctx, req.(*QueuePopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueueService_Size_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueueSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServiceServer).Size(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/QueueService/Size",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServiceServer).Size(ctx, req.(*QueueSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _QueueService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "QueueService",
	HandlerType: (*QueueServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Push",
			Handler:    _QueueService_Push_Handler,
		},
		{
			MethodName: "Pop",
			Handler:    _QueueService_Pop_Handler,
		},
		{
			MethodName: "Size",
			Handler:    _QueueService_Size_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "queue-service.proto",
}

func init() { proto.RegisterFile("queue-service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 246 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0x51, 0x4a, 0x03, 0x31,
	0x10, 0x86, 0x59, 0xb3, 0xd4, 0x76, 0x10, 0xdc, 0x8d, 0x20, 0x65, 0x9f, 0x4a, 0xf4, 0xa1, 0x88,
	0xc9, 0x83, 0x1e, 0xc0, 0x2b, 0xd4, 0x78, 0x03, 0xb7, 0x03, 0x2e, 0x42, 0x93, 0x76, 0x1a, 0xc1,
	0x9e, 0xc4, 0xe3, 0x4a, 0x92, 0x89, 0x2c, 0x5d, 0x7c, 0xcb, 0x2c, 0x1f, 0xdf, 0xcc, 0xff, 0x2f,
	0xdc, 0xec, 0x03, 0x06, 0xd4, 0x84, 0x87, 0xaf, 0xa1, 0x47, 0xe3, 0x0f, 0xee, 0xe8, 0xd4, 0x23,
	0x34, 0xaf, 0xf1, 0xf3, 0x26, 0xd0, 0x87, 0xc5, 0x7d, 0x40, 0x3a, 0xca, 0x25, 0x5c, 0xe2, 0x2e,
	0xc1, 0xcb, 0x6a, 0x55, 0xad, 0x17, 0xb6, 0x8c, 0x4a, 0x43, 0x3b, 0xa2, 0xc9, 0xbb, 0x1d, 0x61,
	0xc4, 0x29, 0xf4, 0x3d, 0x12, 0x25, 0x7c, 0x6e, 0xcb, 0xa8, 0xee, 0xe0, 0x3a, 0xe3, 0xce, 0x17,
	0x77, 0x03, 0xe2, 0x13, 0xbf, 0xd9, 0x1b, 0x9f, 0xca, 0x94, 0x0b, 0x22, 0xc4, 0xca, 0x0e, 0xe6,
	0x5b, 0x4c, 0x2b, 0xb7, 0x8c, 0xfe, 0xcd, 0xea, 0x9e, 0xf9, 0xb7, 0xe1, 0x84, 0xff, 0x5b, 0x5f,
	0xf8, 0xd2, 0x4c, 0xb1, 0x56, 0x42, 0x4d, 0xc3, 0x29, 0xa7, 0x12, 0x36, 0xbd, 0xe5, 0x2d, 0xcc,
	0x78, 0xd1, 0xc5, 0x4a, 0xac, 0x17, 0x96, 0xa7, 0xa7, 0x9f, 0x0a, 0xae, 0xb2, 0x21, 0xf7, 0x25,
	0x35, 0xd4, 0x31, 0xb6, 0x6c, 0xcd, 0x79, 0x61, 0x9d, 0x34, 0xd3, 0x56, 0x1e, 0x40, 0x6c, 0x9c,
	0x97, 0x8d, 0x39, 0x6b, 0xa0, 0x6b, 0xcd, 0x24, 0xae, 0x86, 0x3a, 0xde, 0x59, 0xd4, 0xa3, 0x64,
	0x45, 0x3d, 0x8e, 0xf1, 0x3e, 0x4b, 0xbf, 0xee, 0xf9, 0x37, 0x00, 0x00, 0xff, 0xff, 0xe0, 0x11,
	0xfa, 0x73, 0xd1, 0x01, 0x00, 0x00,
}
