// Code generated by protoc-gen-go. DO NOT EDIT.
// source: collect-service.proto

/*
Package collect_service is a generated protocol buffer package.

It is generated from these files:
	collect-service.proto

It has these top-level messages:
	CollectRequest
	CollectResponse
*/
package collect_service

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CollectRequest struct {
	Seed string `protobuf:"bytes,1,opt,name=seed" json:"seed,omitempty"`
}

func (m *CollectRequest) Reset()                    { *m = CollectRequest{} }
func (m *CollectRequest) String() string            { return proto.CompactTextString(m) }
func (*CollectRequest) ProtoMessage()               {}
func (*CollectRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CollectRequest) GetSeed() string {
	if m != nil {
		return m.Seed
	}
	return ""
}

type CollectResponse struct {
	Collected []string `protobuf:"bytes,1,rep,name=collected" json:"collected,omitempty"`
}

func (m *CollectResponse) Reset()                    { *m = CollectResponse{} }
func (m *CollectResponse) String() string            { return proto.CompactTextString(m) }
func (*CollectResponse) ProtoMessage()               {}
func (*CollectResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CollectResponse) GetCollected() []string {
	if m != nil {
		return m.Collected
	}
	return nil
}

func init() {
	proto.RegisterType((*CollectRequest)(nil), "CollectRequest")
	proto.RegisterType((*CollectResponse)(nil), "CollectResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CollectService service

type CollectServiceClient interface {
	Collect(ctx context.Context, in *CollectRequest, opts ...grpc.CallOption) (*CollectResponse, error)
}

type collectServiceClient struct {
	cc *grpc.ClientConn
}

func NewCollectServiceClient(cc *grpc.ClientConn) CollectServiceClient {
	return &collectServiceClient{cc}
}

func (c *collectServiceClient) Collect(ctx context.Context, in *CollectRequest, opts ...grpc.CallOption) (*CollectResponse, error) {
	out := new(CollectResponse)
	err := grpc.Invoke(ctx, "/CollectService/Collect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CollectService service

type CollectServiceServer interface {
	Collect(context.Context, *CollectRequest) (*CollectResponse, error)
}

func RegisterCollectServiceServer(s *grpc.Server, srv CollectServiceServer) {
	s.RegisterService(&_CollectService_serviceDesc, srv)
}

func _CollectService_Collect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).Collect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CollectService/Collect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).Collect(ctx, req.(*CollectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CollectService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "CollectService",
	HandlerType: (*CollectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Collect",
			Handler:    _CollectService_Collect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "collect-service.proto",
}

func init() { proto.RegisterFile("collect-service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 133 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4d, 0xce, 0xcf, 0xc9,
	0x49, 0x4d, 0x2e, 0xd1, 0x2d, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x57, 0x52, 0xe1, 0xe2, 0x73, 0x86, 0x48, 0x04, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x08,
	0x09, 0x71, 0xb1, 0x14, 0xa7, 0xa6, 0xa6, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x81, 0xd9,
	0x4a, 0xfa, 0x5c, 0xfc, 0x70, 0x55, 0xc5, 0x05, 0xf9, 0x79, 0xc5, 0xa9, 0x42, 0x32, 0x5c, 0x9c,
	0x50, 0x13, 0xc1, 0x6a, 0x99, 0x35, 0x38, 0x83, 0x10, 0x02, 0x46, 0x76, 0x70, 0x63, 0x83, 0x21,
	0xd6, 0x09, 0xe9, 0x70, 0xb1, 0x43, 0x45, 0x84, 0xf8, 0xf5, 0x50, 0xad, 0x94, 0x12, 0xd0, 0x43,
	0x33, 0x3d, 0x89, 0x0d, 0xec, 0x3a, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9b, 0x45, 0x8c,
	0xe2, 0xb6, 0x00, 0x00, 0x00,
}
